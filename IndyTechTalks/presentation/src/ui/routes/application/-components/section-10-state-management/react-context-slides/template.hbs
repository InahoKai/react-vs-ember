<Slide as |s|>
  <h3><Title /></h3>

  <s.Notes data-markdown>
    - An alternative to Redux for smaller apps
  </s.Notes>
</Slide>

<Slide as |s|>
  <s.ContextTitle><Title /></s.ContextTitle>

  <div class='flex-row justify-content-center'>
    <div
      class='
        p-lg m-r-xl
        circle has-background-black
        flex-row justify-content-center align-items-center'
      style='width: 300px; height: 300px;'
    >
      <Image @of='react-router.png' />
    </div>

    <Image @of='orbitjs.png' />
  </div>

  <s.Notes data-markdown>
    - Used many places to provide access to shared state
      - such as, router, orbitjs' data store
  </s.Notes>
</Slide>


<Slide as |s|>
  <s.ContextTitle><Title /> Provider</s.ContextTitle>

  {{code-snippet name='react-context-provider.tsx'}}

  <SupportingCodeLink
    class='is-size-4'
    @to='state-management/react-context/src/ui/application.tsx'>
    src/ui/application.tsx
  </SupportingCodeLink>

  <s.Notes data-markdown>
   - this component becomes the state manager for this particular context.
   - this is also why you see a lot of higher-order-components coupled with this pattern.
     - the higher-ordered component abstracts away this setup from you.
  </s.Notes>
</Slide>


<Slide as |s|>
  <s.ContextTitle><Title /> Consumer</s.ContextTitle>

  {{code-snippet name='react-context-consumer.tsx'}}

  <SupportingCodeLink
    class='is-size-4'
    @to='state-management/react-context/src/ui/components/footer/index.tsx'>
    src/ui/components/footer/index.tsx
  </SupportingCodeLink>

  <s.Notes data-markdown>
   - only children of the component containing the provider may consume the context.
   - the context can be consumed by any number of children
   - withRouter could be implemented this way
  </s.Notes>
</Slide>
